# =======================================================
# SCRIPT ROLLBACK PERSONNALIS√â - PowerShell Windows
# Commit cible: e56db6f
# Migrations √† supprimer: 0005, 0006
# =======================================================

param(
    [switch]$Force = $false
)

# Configuration
$targetCommit = "e56db6f"
$migrationsToDelete = @(
    "0006_rappel_erreurs_validation_rappel_template_utilise_and_more.py",
    "0005_rappeltemplate.py"
)

Write-Host "üîÑ ROLLBACK PERSONNALIS√â - Retour √† $targetCommit" -ForegroundColor Yellow
Write-Host "====================================================" -ForegroundColor Yellow

# =======================================================
# √âTAPE 1: V√©rifications pr√©alables
# =======================================================
Write-Host "`nüîç √âTAPE 1: V√©rifications pr√©alables" -ForegroundColor Cyan

# V√©rifier qu'on est dans le bon projet
if (-not (Test-Path "manage.py")) {
    Write-Host "‚ùå ERREUR: manage.py non trouv√©" -ForegroundColor Red
    Write-Host "   Ex√©cutez ce script depuis la racine de votre projet Django" -ForegroundColor Yellow
    Write-Host "   Exemple: cd C:\Users\frada\OneDrive\INFORMATIQUE\Web\SourceCode\project-web" -ForegroundColor Yellow
    exit 1
}

Write-Host "‚úÖ Projet Django d√©tect√©" -ForegroundColor Green

# V√©rifier que le commit cible existe
try {
    $commitInfo = git show --oneline -s $targetCommit 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Commit cible trouv√©: $commitInfo" -ForegroundColor Green
    } else {
        throw "Commit non trouv√©"
    }
} catch {
    Write-Host "‚ùå ERREUR: Commit $targetCommit non trouv√©" -ForegroundColor Red
    Write-Host "   V√©rifiez le hash du commit avec: git log --oneline" -ForegroundColor Yellow
    exit 1
}

# Afficher l'√©tat actuel
Write-Host "`nüìä √âtat actuel:" -ForegroundColor Cyan
Write-Host "R√©pertoire: $(Get-Location)" -ForegroundColor White
git status --porcelain | ForEach-Object { Write-Host "   $_" -ForegroundColor Yellow }

# V√©rifier les migrations existantes
Write-Host "`nüìÇ Migrations actuelles dans cotisations:" -ForegroundColor Cyan
$currentMigrations = Get-ChildItem "apps\cotisations\migrations\*.py" -ErrorAction SilentlyContinue
if ($currentMigrations) {
    $currentMigrations | ForEach-Object { 
        $status = if ($_.Name -in $migrationsToDelete) { "[√Ä SUPPRIMER]" } else { "[√Ä CONSERVER]" }
        Write-Host "   $status $($_.Name)" -ForegroundColor $(if ($_.Name -in $migrationsToDelete) { "Red" } else { "Green" })
    }
} else {
    Write-Host "   Aucune migration trouv√©e" -ForegroundColor Yellow
}

# =======================================================
# √âTAPE 2: Sauvegarde de s√©curit√©
# =======================================================
Write-Host "`nüíæ √âTAPE 2: Sauvegarde de s√©curit√©" -ForegroundColor Cyan

$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$backupDir = "backup_rollback_e56db6f_$timestamp"

Write-Host "üì¶ Cr√©ation de la sauvegarde: $backupDir" -ForegroundColor White
New-Item -ItemType Directory -Path $backupDir -Force | Out-Null

# Sauvegarder les √©l√©ments critiques
$backupItems = @(
    @{ Source = "apps\cotisations"; Dest = "$backupDir\cotisations"; Name = "Application cotisations" },
    @{ Source = "db.sqlite3"; Dest = "$backupDir\db.sqlite3"; Name = "Base de donn√©es" },
    @{ Source = "static\js\cotisations"; Dest = "$backupDir\static_js"; Name = "JS cotisations" },
    @{ Source = "templates\cotisations"; Dest = "$backupDir\templates"; Name = "Templates cotisations" }
)

foreach ($item in $backupItems) {
    if (Test-Path $item.Source) {
        if ((Get-Item $item.Source) -is [System.IO.DirectoryInfo]) {
            Copy-Item -Path $item.Source -Destination $item.Dest -Recurse -Force
        } else {
            Copy-Item -Path $item.Source -Destination $item.Dest -Force
        }
        Write-Host "   ‚úÖ $($item.Name) sauvegard√©" -ForegroundColor Green
    } else {
        Write-Host "   ‚ö†Ô∏è  $($item.Name) non trouv√©, ignor√©" -ForegroundColor Yellow
    }
}

# Sauvegarder les stash actuels
$stashCount = (git stash list | Measure-Object).Count
if ($stashCount -gt 0) {
    Write-Host "   üìã $stashCount stash(es) existant(s) pr√©serv√©(s)" -ForegroundColor Green
}

Write-Host "‚úÖ Sauvegarde termin√©e dans: $backupDir" -ForegroundColor Green

# =======================================================
# √âTAPE 3: Confirmation utilisateur
# =======================================================
if (-not $Force) {
    Write-Host "`n‚ö†Ô∏è  CONFIRMATION REQUISE" -ForegroundColor Red
    Write-Host "=============================" -ForegroundColor Red
    Write-Host "ATTENTION: Cette op√©ration va:" -ForegroundColor Yellow
    Write-Host "   ‚ùå Revenir au commit: $targetCommit" -ForegroundColor Red
    Write-Host "   ‚ùå Supprimer D√âFINITIVEMENT tous les commits apr√®s $targetCommit" -ForegroundColor Red
    Write-Host "   ‚ùå Supprimer les migrations: " -ForegroundColor Red
    $migrationsToDelete | ForEach-Object { Write-Host "      - $_" -ForegroundColor Red }
    Write-Host "   ‚ùå Perdre tous les changements non commit√©s" -ForegroundColor Red
    Write-Host ""
    Write-Host "   ‚úÖ Sauvegarde disponible dans: $backupDir" -ForegroundColor Green
    Write-Host ""
    
    $confirmation = Read-Host "Tapez 'OUI' en majuscules pour confirmer"
    if ($confirmation -ne "OUI") {
        Write-Host "‚ùå Op√©ration annul√©e par l'utilisateur" -ForegroundColor Red
        Write-Host "üíæ Sauvegarde conserv√©e dans: $backupDir" -ForegroundColor Green
        exit 0
    }
}

# =======================================================
# √âTAPE 4: Nettoyage de la base de donn√©es
# =======================================================
Write-Host "`nüóÑÔ∏è √âTAPE 4: Nettoyage de la base de donn√©es" -ForegroundColor Cyan

# Tenter de faire un migrate vers zero pour les migrations √† supprimer
Write-Host "üì¶ Tentative de rollback des migrations en base..." -ForegroundColor White

try {
    # Identifier le num√©ro de la migration pr√©c√©dente (0004)
    $keepMigration = "0004"
    
    Write-Host "   Rollback vers la migration $keepMigration..." -ForegroundColor White
    python manage.py migrate cotisations $keepMigration --fake 2>$null
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úÖ Rollback des migrations r√©ussi" -ForegroundColor Green
    } else {
        Write-Host "   ‚ö†Ô∏è  Rollback partiel, on continue..." -ForegroundColor Yellow
    }
} catch {
    Write-Host "   ‚ö†Ô∏è  Erreur lors du rollback des migrations, on continue..." -ForegroundColor Yellow
}

# =======================================================
# √âTAPE 5: Rollback Git
# =======================================================
Write-Host "`nüîÑ √âTAPE 5: Rollback Git vers $targetCommit" -ForegroundColor Cyan

# Stash les changements actuels
Write-Host "üíæ Sauvegarde des changements non commit√©s..." -ForegroundColor White
git stash push -m "Rollback automatique vers $targetCommit - $timestamp" 2>$null

# Reset hard vers le commit cible
Write-Host "üéØ Reset vers le commit $targetCommit..." -ForegroundColor White
git reset --hard $targetCommit

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Reset Git r√©ussi" -ForegroundColor Green
} else {
    Write-Host "‚ùå ERREUR lors du reset Git" -ForegroundColor Red
    exit 1
}

# V√©rifier le r√©sultat
Write-Host "`nüìä √âtat apr√®s rollback Git:" -ForegroundColor White
$currentCommit = git rev-parse --short HEAD
Write-Host "   Commit actuel: $currentCommit" -ForegroundColor Green
git log --oneline -3 | ForEach-Object { Write-Host "   $_" -ForegroundColor Gray }

# =======================================================
# √âTAPE 6: Suppression des migrations sp√©cifiques
# =======================================================
Write-Host "`nüóëÔ∏è  √âTAPE 6: Suppression des migrations sp√©cifiques" -ForegroundColor Cyan

$migrationsDir = "apps\cotisations\migrations"
$deletedCount = 0

foreach ($migrationFile in $migrationsToDelete) {
    $fullPath = Join-Path $migrationsDir $migrationFile
    if (Test-Path $fullPath) {
        Remove-Item $fullPath -Force
        Write-Host "   ‚úÖ Supprim√©: $migrationFile" -ForegroundColor Green
        $deletedCount++
    } else {
        Write-Host "   ‚ö†Ô∏è  Non trouv√©: $migrationFile" -ForegroundColor Yellow
    }
}

Write-Host "üìä $deletedCount migration(s) supprim√©e(s)" -ForegroundColor Green

# V√©rifier les migrations restantes
Write-Host "`nüìÇ Migrations restantes:" -ForegroundColor White
$remainingMigrations = Get-ChildItem "$migrationsDir\*.py" -ErrorAction SilentlyContinue | Where-Object { $_.Name -ne "__init__.py" }
if ($remainingMigrations) {
    $remainingMigrations | ForEach-Object { Write-Host "   ‚úÖ $($_.Name)" -ForegroundColor Green }
} else {
    Write-Host "   ‚ö†Ô∏è  Aucune migration restante (hors __init__.py)" -ForegroundColor Yellow
}

# =======================================================
# √âTAPE 7: Nettoyage de l'environnement
# =======================================================
Write-Host "`nüßπ √âTAPE 7: Nettoyage de l'environnement" -ForegroundColor Cyan

# Supprimer les fichiers Python compil√©s
Write-Host "üóëÔ∏è  Suppression des fichiers .pyc et __pycache__..." -ForegroundColor White
Get-ChildItem -Path . -Recurse -Filter "*.pyc" -ErrorAction SilentlyContinue | Remove-Item -Force
Get-ChildItem -Path . -Recurse -Name "__pycache__" -ErrorAction SilentlyContinue | Remove-Item -Recurse -Force
Write-Host "   ‚úÖ Fichiers temporaires supprim√©s" -ForegroundColor Green

# Nettoyer les fichiers statiques collect√©s
if (Test-Path "staticfiles") {
    Write-Host "üóëÔ∏è  Nettoyage des fichiers statiques..." -ForegroundColor White
    Remove-Item "staticfiles" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "   ‚úÖ Staticfiles nettoy√©" -ForegroundColor Green
}

# =======================================================
# √âTAPE 8: Reconstruction
# =======================================================
Write-Host "`nüèóÔ∏è  √âTAPE 8: Reconstruction de l'environnement" -ForegroundColor Cyan

# Recollecte des fichiers statiques
Write-Host "üì¶ Recollecte des fichiers statiques..." -ForegroundColor White
python manage.py collectstatic --noinput --clear 2>$null
if ($LASTEXITCODE -eq 0) {
    Write-Host "   ‚úÖ Fichiers statiques collect√©s" -ForegroundColor Green
} else {
    Write-Host "   ‚ö†Ô∏è  Erreur lors de la collecte, continuons..." -ForegroundColor Yellow
}

# Cr√©er les nouvelles migrations si n√©cessaire
Write-Host "üìù V√©rification des migrations n√©cessaires..." -ForegroundColor White
$makeMigrationsOutput = python manage.py makemigrations cotisations --dry-run 2>&1
if ($makeMigrationsOutput -match "No changes detected") {
    Write-Host "   ‚úÖ Aucune nouvelle migration n√©cessaire" -ForegroundColor Green
} else {
    Write-Host "   üìù Cr√©ation des nouvelles migrations..." -ForegroundColor White
    python manage.py makemigrations cotisations
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úÖ Nouvelles migrations cr√©√©es" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Erreur lors de la cr√©ation des migrations" -ForegroundColor Red
    }
}

# Appliquer les migrations
Write-Host "üì¶ Application des migrations..." -ForegroundColor White
python manage.py migrate 2>$null
if ($LASTEXITCODE -eq 0) {
    Write-Host "   ‚úÖ Migrations appliqu√©es avec succ√®s" -ForegroundColor Green
} else {
    Write-Host "   ‚ö†Ô∏è  Erreur lors de l'application, v√©rifiez manuellement" -ForegroundColor Yellow
}

# =======================================================
# √âTAPE 9: V√©rifications finales
# =======================================================
Write-Host "`n‚úÖ √âTAPE 9: V√©rifications finales" -ForegroundColor Cyan

# Check Django
Write-Host "üîç V√©rification de Django..." -ForegroundColor White
$checkOutput = python manage.py check 2>&1
if ($LASTEXITCODE -eq 0) {
    Write-Host "   ‚úÖ Django check r√©ussi" -ForegroundColor Green
} else {
    Write-Host "   ‚ö†Ô∏è  Avertissements Django:" -ForegroundColor Yellow
    $checkOutput | ForEach-Object { Write-Host "      $_" -ForegroundColor Yellow }
}

# Test de base des migrations
Write-Host "üß™ Test des migrations..." -ForegroundColor White
try {
    python manage.py showmigrations cotisations | Out-String | ForEach-Object {
        if ($_ -match "\[X\]") { Write-Host "   ‚úÖ Migration appliqu√©e" -ForegroundColor Green }
        elseif ($_ -match "\[ \]") { Write-Host "   ‚ö†Ô∏è  Migration en attente" -ForegroundColor Yellow }
    }
} catch {
    Write-Host "   ‚ö†Ô∏è  Impossible de v√©rifier les migrations" -ForegroundColor Yellow
}

# =======================================================
# √âTAPE 10: Cr√©ation d'un point de sauvegarde
# =======================================================
Write-Host "`nüíæ √âTAPE 10: Point de sauvegarde propre" -ForegroundColor Cyan

# Cr√©er un commit de sauvegarde
Write-Host "üìù Cr√©ation d'un commit de sauvegarde..." -ForegroundColor White
git add . 2>$null
$commitMessage = @"
üîÑ Rollback complet vers $targetCommit - √âtat propre

‚úÖ Actions effectu√©es:
- Rollback Git vers commit $targetCommit
- Suppression migrations: $(($migrationsToDelete | ForEach-Object { $_.Replace('.py', '') }) -join ', ')
- Environnement nettoy√© et reconstruit
- Migrations recr√©√©es si n√©cessaire

üì¶ Sauvegarde disponible: $backupDir
üìÖ Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
ü§ñ Rollback automatique
"@

git commit -m $commitMessage 2>$null
if ($LASTEXITCODE -eq 0) {
    Write-Host "   ‚úÖ Commit de sauvegarde cr√©√©" -ForegroundColor Green
} else {
    Write-Host "   ‚ö†Ô∏è  Pas de changements √† commiter" -ForegroundColor Yellow
}

# Cr√©er une branche de sauvegarde
$branchName = "rollback-propre-$timestamp"
git branch $branchName 2>$null
if ($LASTEXITCODE -eq 0) {
    Write-Host "   üåø Branche de sauvegarde cr√©√©e: $branchName" -ForegroundColor Green
}

# =======================================================
# R√âSUM√â FINAL
# =======================================================
Write-Host "`nüéâ ROLLBACK TERMIN√â AVEC SUCC√àS!" -ForegroundColor Green
Write-Host "=======================================" -ForegroundColor Green

Write-Host "`nüìã R√âSUM√â DES ACTIONS:" -ForegroundColor Cyan
Write-Host "‚úÖ Rollback Git vers commit: $targetCommit" -ForegroundColor White
Write-Host "‚úÖ Migrations supprim√©es:" -ForegroundColor White
$migrationsToDelete | ForEach-Object { Write-Host "   - $_" -ForegroundColor Gray }
Write-Host "‚úÖ Base de donn√©es nettoy√©e" -ForegroundColor White
Write-Host "‚úÖ Environnement reconstruit" -ForegroundColor White
Write-Host "‚úÖ Sauvegarde compl√®te: $backupDir" -ForegroundColor White
Write-Host "‚úÖ Point de sauvegarde: $branchName" -ForegroundColor White

Write-Host "`nüöÄ PROCHAINES √âTAPES:" -ForegroundColor Yellow
Write-Host "1. Tester que l'application fonctionne:" -ForegroundColor White
Write-Host "   python manage.py runserver" -ForegroundColor Gray
Write-Host "2. Acc√©der √†: http://localhost:8000/cotisations/" -ForegroundColor White
Write-Host "3. Tester la cr√©ation d'un rappel basique" -ForegroundColor White
Write-Host "4. Commencer l'impl√©mentation √©tape par √©tape" -ForegroundColor White

Write-Host "`nüÜò EN CAS DE PROBL√àME:" -ForegroundColor Red
Write-Host "- Sauvegarde compl√®te: $backupDir" -ForegroundColor White
Write-Host "- Branche de sauvegarde: git checkout $branchName" -ForegroundColor White
Write-Host "- Stash disponible: git stash list" -ForegroundColor White
Write-Host "- Restaurer DB: Copy-Item '$backupDir\db.sqlite3' '.\db.sqlite3' -Force" -ForegroundColor White

Write-Host "`nüéØ VOUS √äTES MAINTENANT PR√äT POUR UNE IMPL√âMENTATION PROPRE!" -ForegroundColor Green
Write-Host "=================================================================" -ForegroundColor Green

# Afficher les informations finales pour r√©f√©rence
Write-Host "`nüìä √âTAT FINAL:" -ForegroundColor Cyan
Write-Host "Commit actuel: $(git rev-parse --short HEAD)" -ForegroundColor White
Write-Host "Branche: $(git branch --show-current)" -ForegroundColor White
Write-Host "Migrations cotisations:" -ForegroundColor White
Get-ChildItem "apps\cotisations\migrations\*.py" -ErrorAction SilentlyContinue | Where-Object { $_.Name -ne "__init__.py" } | ForEach-Object { 
    Write-Host "   $($_.Name)" -ForegroundColor Gray 
}

Write-Host "`nScript termin√©. Bon d√©veloppement! üöÄ" -ForegroundColor Green