# Generated by Django 5.1.8 on 2025-07-09 05:40

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cotisations', '0001_initial'),
        ('membres', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TypeEvenement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de suppression')),
                ('libelle', models.CharField(max_length=100, unique=True, verbose_name='Libellé')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('couleur_affichage', models.CharField(default='#007bff', help_text="Code couleur hexadécimal pour l'affichage (ex: #007bff)", max_length=7, verbose_name="Couleur d'affichage")),
                ('comportements_specifiques', models.JSONField(blank=True, default=dict, help_text="Configuration des comportements spécifiques à ce type d'événement", verbose_name='Comportements spécifiques')),
                ('necessite_validation', models.BooleanField(default=False, verbose_name='Nécessite une validation')),
                ('permet_accompagnants', models.BooleanField(default=True, verbose_name='Permet les accompagnants')),
                ('ordre_affichage', models.PositiveIntegerField(default=0, verbose_name="Ordre d'affichage")),
            ],
            options={
                'verbose_name': "Type d'événement",
                'verbose_name_plural': "Types d'événements",
                'db_table': 'types_evenements',
                'ordering': ['ordre_affichage', 'libelle'],
            },
        ),
        migrations.CreateModel(
            name='Evenement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de suppression')),
                ('titre', models.CharField(max_length=255, verbose_name='Titre')),
                ('description', models.TextField(verbose_name='Description')),
                ('date_debut', models.DateTimeField(verbose_name='Date et heure de début')),
                ('date_fin', models.DateTimeField(blank=True, null=True, verbose_name='Date et heure de fin')),
                ('lieu', models.CharField(max_length=255, verbose_name='Lieu')),
                ('adresse_complete', models.TextField(blank=True, verbose_name='Adresse complète')),
                ('capacite_max', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Capacité maximum')),
                ('inscriptions_ouvertes', models.BooleanField(default=True, verbose_name='Inscriptions ouvertes')),
                ('date_ouverture_inscriptions', models.DateTimeField(blank=True, null=True, verbose_name="Date d'ouverture des inscriptions")),
                ('date_fermeture_inscriptions', models.DateTimeField(blank=True, null=True, verbose_name='Date de fermeture des inscriptions')),
                ('est_payant', models.BooleanField(default=False, verbose_name='Événement payant')),
                ('tarif_membre', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Tarif membre')),
                ('tarif_salarie', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Tarif salarié')),
                ('tarif_invite', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Tarif invité')),
                ('permet_accompagnants', models.BooleanField(default=True, verbose_name='Permet les accompagnants')),
                ('nombre_max_accompagnants', models.PositiveIntegerField(default=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name="Nombre maximum d'accompagnants")),
                ('delai_confirmation', models.PositiveIntegerField(default=48, help_text="Délai en heures pour confirmer l'inscription", verbose_name='Délai de confirmation (heures)')),
                ('statut', models.CharField(choices=[('brouillon', 'Brouillon'), ('en_attente_validation', 'En attente de validation'), ('publie', 'Publié'), ('annule', 'Annulé'), ('termine', 'Terminé'), ('reporte', 'Reporté')], default='brouillon', max_length=25, verbose_name='Statut')),
                ('instructions_particulieres', models.TextField(blank=True, verbose_name='Instructions particulières')),
                ('materiel_requis', models.TextField(blank=True, verbose_name='Matériel requis')),
                ('est_recurrent', models.BooleanField(default=False, verbose_name='Événement récurrent')),
                ('reference', models.CharField(blank=True, max_length=50, unique=True, verbose_name='Référence')),
                ('image', models.ImageField(blank=True, null=True, upload_to='evenements/images/', verbose_name="Image de l'événement")),
                ('evenement_parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='occurrences', to='evenements.evenement', verbose_name='Événement parent')),
                ('organisateur', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Organisateur')),
                ('type_evenement', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='evenements.typeevenement', verbose_name="Type d'événement")),
            ],
            options={
                'verbose_name': 'Événement',
                'verbose_name_plural': 'Événements',
                'db_table': 'evenements',
                'ordering': ['-date_debut'],
            },
        ),
        migrations.CreateModel(
            name='EvenementRecurrence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de suppression')),
                ('frequence', models.CharField(choices=[('hebdomadaire', 'Hebdomadaire'), ('mensuelle', 'Mensuelle'), ('annuelle', 'Annuelle')], max_length=15, verbose_name='Fréquence')),
                ('intervalle_recurrence', models.PositiveIntegerField(default=1, help_text='Intervalle entre les occurrences (ex: tous les 2 semaines)', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Intervalle de récurrence')),
                ('jours_semaine', models.JSONField(blank=True, default=list, help_text='Jours de la semaine pour récurrence hebdomadaire (0=lundi, 6=dimanche)', verbose_name='Jours de la semaine')),
                ('date_fin_recurrence', models.DateField(blank=True, null=True, verbose_name='Date de fin de récurrence')),
                ('nombre_occurrences_max', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name="Nombre maximum d'occurrences")),
                ('evenement_parent', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='recurrence', to='evenements.evenement', verbose_name='Événement parent')),
            ],
            options={
                'verbose_name': "Récurrence d'événement",
                'verbose_name_plural': "Récurrences d'événements",
                'db_table': 'evenements_recurrence',
            },
        ),
        migrations.CreateModel(
            name='InscriptionEvenement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de suppression')),
                ('date_inscription', models.DateTimeField(auto_now_add=True, verbose_name="Date d'inscription")),
                ('date_confirmation', models.DateTimeField(blank=True, null=True, verbose_name='Date de confirmation')),
                ('date_limite_confirmation', models.DateTimeField(blank=True, null=True, verbose_name='Date limite de confirmation')),
                ('statut', models.CharField(choices=[('en_attente', 'En attente de confirmation'), ('confirmee', 'Confirmée'), ('liste_attente', "Liste d'attente"), ('annulee', 'Annulée'), ('presente', 'Présent(e)'), ('absente', 'Absent(e)'), ('expiree', 'Expirée')], default='en_attente', max_length=15, verbose_name='Statut')),
                ('commentaire', models.TextField(blank=True, verbose_name='Commentaire')),
                ('nombre_accompagnants', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name="Nombre d'accompagnants")),
                ('details_accompagnants', models.JSONField(blank=True, default=list, help_text='Détails des accompagnants (nom, prénom, etc.)', verbose_name='Détails des accompagnants')),
                ('montant_paye', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Montant payé')),
                ('reference_paiement', models.CharField(blank=True, max_length=100, verbose_name='Référence de paiement')),
                ('code_confirmation', models.CharField(blank=True, max_length=50, unique=True, verbose_name='Code de confirmation')),
                ('adresse_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='Adresse IP')),
                ('evenement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inscriptions', to='evenements.evenement', verbose_name='Événement')),
                ('membre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inscriptions_evenements', to='membres.membre', verbose_name='Membre')),
                ('mode_paiement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cotisations.modepaiement', verbose_name='Mode de paiement')),
            ],
            options={
                'verbose_name': 'Inscription à un événement',
                'verbose_name_plural': 'Inscriptions aux événements',
                'db_table': 'inscriptions_evenements',
                'ordering': ['-date_inscription'],
            },
        ),
        migrations.CreateModel(
            name='AccompagnantInvite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de suppression')),
                ('nom', models.CharField(max_length=100, verbose_name='Nom')),
                ('prenom', models.CharField(max_length=100, verbose_name='Prénom')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('telephone', models.CharField(blank=True, max_length=20, verbose_name='Téléphone')),
                ('statut', models.CharField(choices=[('invite', 'Invité'), ('confirme', 'Confirmé'), ('refuse', 'Refusé'), ('present', 'Présent'), ('absent', 'Absent')], default='invite', max_length=10, verbose_name='Statut')),
                ('est_accompagnant', models.BooleanField(default=True, help_text='True pour accompagnant, False pour invité externe', verbose_name='Est un accompagnant')),
                ('date_invitation', models.DateTimeField(auto_now_add=True, verbose_name="Date d'invitation")),
                ('date_reponse', models.DateTimeField(blank=True, null=True, verbose_name='Date de réponse')),
                ('commentaire', models.TextField(blank=True, verbose_name='Commentaire')),
                ('restrictions_alimentaires', models.TextField(blank=True, verbose_name='Restrictions alimentaires')),
                ('inscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accompagnants', to='evenements.inscriptionevenement', verbose_name='Inscription')),
            ],
            options={
                'verbose_name': 'Accompagnant/Invité',
                'verbose_name_plural': 'Accompagnants/Invités',
                'db_table': 'accompagnants_invites',
                'ordering': ['nom', 'prenom'],
            },
        ),
        migrations.CreateModel(
            name='SessionEvenement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de suppression')),
                ('titre_session', models.CharField(max_length=255, verbose_name='Titre de la session')),
                ('description_session', models.TextField(blank=True, verbose_name='Description de la session')),
                ('date_debut_session', models.DateTimeField(verbose_name='Date et heure de début de session')),
                ('date_fin_session', models.DateTimeField(blank=True, null=True, verbose_name='Date et heure de fin de session')),
                ('capacite_session', models.PositiveIntegerField(blank=True, help_text="Si vide, utilise la capacité de l'événement parent", null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Capacité de la session')),
                ('ordre_session', models.PositiveIntegerField(default=1, verbose_name='Ordre de la session')),
                ('est_obligatoire', models.BooleanField(default=True, verbose_name='Session obligatoire')),
                ('intervenant', models.CharField(blank=True, max_length=255, verbose_name='Intervenant')),
                ('evenement_parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='evenements.evenement', verbose_name='Événement parent')),
            ],
            options={
                'verbose_name': "Session d'événement",
                'verbose_name_plural': "Sessions d'événements",
                'db_table': 'sessions_evenements',
                'ordering': ['ordre_session', 'date_debut_session'],
                'unique_together': {('evenement_parent', 'ordre_session')},
            },
        ),
        migrations.AddField(
            model_name='inscriptionevenement',
            name='sessions_selectionnees',
            field=models.ManyToManyField(blank=True, to='evenements.sessionevenement', verbose_name='Sessions sélectionnées'),
        ),
        migrations.CreateModel(
            name='ValidationEvenement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de suppression')),
                ('statut_validation', models.CharField(choices=[('en_attente', 'En attente'), ('approuve', 'Approuvé'), ('refuse', 'Refusé')], default='en_attente', max_length=15, verbose_name='Statut de validation')),
                ('date_validation', models.DateTimeField(blank=True, null=True, verbose_name='Date de validation')),
                ('commentaire_validation', models.TextField(blank=True, verbose_name='Commentaire de validation')),
                ('modifications_demandees', models.JSONField(blank=True, default=list, verbose_name='Modifications demandées')),
                ('evenement', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='validation', to='evenements.evenement', verbose_name='Événement')),
                ('validateur', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Validateur')),
            ],
            options={
                'verbose_name': "Validation d'événement",
                'verbose_name_plural': "Validations d'événements",
                'db_table': 'validations_evenements',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='inscriptionevenement',
            index=models.Index(fields=['statut'], name='inscription_statut_7aeef9_idx'),
        ),
        migrations.AddIndex(
            model_name='inscriptionevenement',
            index=models.Index(fields=['date_inscription'], name='inscription_date_in_27b28c_idx'),
        ),
        migrations.AddIndex(
            model_name='inscriptionevenement',
            index=models.Index(fields=['date_limite_confirmation'], name='inscription_date_li_eee338_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='inscriptionevenement',
            unique_together={('evenement', 'membre')},
        ),
        migrations.AddIndex(
            model_name='evenement',
            index=models.Index(fields=['date_debut'], name='evenements_date_de_2845eb_idx'),
        ),
        migrations.AddIndex(
            model_name='evenement',
            index=models.Index(fields=['statut'], name='evenements_statut_72d3b8_idx'),
        ),
        migrations.AddIndex(
            model_name='evenement',
            index=models.Index(fields=['type_evenement'], name='evenements_type_ev_0fc661_idx'),
        ),
        migrations.AddIndex(
            model_name='evenement',
            index=models.Index(fields=['organisateur'], name='evenements_organis_f5f25a_idx'),
        ),
    ]
