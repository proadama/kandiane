from django.test import TestCase, RequestFactory, Client
from django.urls import reverse
from django.utils import timezone
from django.contrib.auth.models import User, AnonymousUser
from datetime import timedelta
from .models import Statut
from .views import HomeView, DashboardView
from .middleware import RequestLogMiddleware, MaintenanceModeMiddleware
from .utils import get_unique_slug, get_file_path
from django.conf import settings
import os
from unittest.mock import patch
from django.http import HttpResponse


class BaseModelTest(TestCase):
    """
    Tests pour le modèle de base abstraits.
    """
    
    def setUp(self):
        """
        Configuration initiale des tests.
        """
        self.statut = Statut.objects.create(
            nom="Test Statut",
            description="Description de test"
        )
    
    def test_timestamps(self):
        """
        Tester la création automatique des timestamps.
        """
        self.assertIsNotNone(self.statut.created_at)
        self.assertIsNotNone(self.statut.updated_at)
        self.assertIsNone(self.statut.deleted_at)
    
    def test_soft_delete(self):
        """
        Tester la suppression logique.
        """
        statut_id = self.statut.id
        
        # Suppression logique
        self.statut.delete()
        
        # Vérifier que l'objet n'est plus accessible via le manager standard
        self.assertEqual(Statut.objects.filter(id=statut_id).count(), 0)
        
        # Mais il devrait être accessible via with_deleted
        deleted_statut = Statut.objects.with_deleted().get(id=statut_id)
        self.assertIsNotNone(deleted_statut.deleted_at)
    
    def test_hard_delete(self):
        """
        Tester la suppression physique.
        """
        statut_id = self.statut.id
        
        # Suppression physique
        self.statut.delete(hard=True)
        
        # Vérifier que l'objet n'existe plus du tout
        self.assertEqual(Statut.objects.with_deleted().filter(id=statut_id).count(), 0)


class StatutModelTest(TestCase):
    """
    Tests spécifiques pour le modèle Statut.
    """
    
    def setUp(self):
        self.statut = Statut.objects.create(
            nom="Statut Test",
            description="Une description de test"
        )
    
    def test_str_method(self):
        """
        Tester la méthode __str__.
        """
        self.assertEqual(str(self.statut), "Statut Test")
    
    def test_verbose_name(self):
        """
        Tester les noms verbeux.
        """
        self.assertEqual(Statut._meta.verbose_name, "Statut")
        self.assertEqual(Statut._meta.verbose_name_plural, "Statuts")


class BaseManagerTest(TestCase):
    """
    Tests pour le gestionnaire de modèles personnalisé.
    """
    
    def setUp(self):
        # Créer quelques statuts
        self.statut1 = Statut.objects.create(nom="Statut 1")
        self.statut2 = Statut.objects.create(nom="Statut 2")
        self.statut3 = Statut.objects.create(nom="Statut 3")
        
        # Supprimer logiquement le statut 3
        self.statut3.delete()
    
    def test_default_queryset(self):
        """
        Tester que le queryset par défaut n'inclut pas les objets supprimés.
        """
        statuts = Statut.objects.all()
        self.assertEqual(statuts.count(), 2)
        self.assertIn(self.statut1, statuts)
        self.assertIn(self.statut2, statuts)
        self.assertNotIn(self.statut3, statuts)
    
    def test_with_deleted(self):
        """
        Tester la méthode with_deleted.
        """
        statuts = Statut.objects.with_deleted()
        self.assertEqual(statuts.count(), 3)
        self.assertIn(self.statut3, statuts)
    
    def test_only_deleted(self):
        """
        Tester la méthode only_deleted.
        """
        statuts = Statut.objects.only_deleted()
        self.assertEqual(statuts.count(), 1)
        self.assertIn(self.statut3, statuts)


class ViewsTest(TestCase):
    """
    Tests pour les vues.
    """
    
    def setUp(self):
        self.client = Client()
        self.factory = RequestFactory()
        self.user = User.objects.create_user(
            username='testuser',
            email='test@example.com',
            password='password123'
        )
    
    def test_home_view(self):
        """
        Tester la vue HomeView.
        """
        # Tester l'accès à la page d'accueil
        response = self.client.get(reverse('core:home'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'core/home.html')
        
        # Tester avec la méthode de classe
        request = self.factory.get('/')
        request.user = AnonymousUser()
        response = HomeView.as_view()(request)
        self.assertEqual(response.status_code, 200)
    
    def test_dashboard_view_unauthenticated(self):
        """
        Tester que la vue DashboardView redirige les utilisateurs non authentifiés.
        """
        response = self.client.get(reverse('core:dashboard'))
        self.assertEqual(response.status_code, 302)  # Redirection vers la page de connexion
    
    def test_dashboard_view_authenticated(self):
        """
        Tester que la vue DashboardView est accessible aux utilisateurs authentifiés.
        """
        self.client.login(username='testuser', password='password123')
        response = self.client.get(reverse('core:dashboard'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'core/dashboard.html')


class MiddlewareTest(TestCase):
    """
    Tests pour les middlewares.
    """
    
    def setUp(self):
        self.client = Client()
        self.factory = RequestFactory()
        self.user = User.objects.create_user(
            username='testuser',
            email='test@example.com',
            password='password123'
        )
    
    @patch('apps.core.middleware.logger.info')
    def test_request_log_middleware(self, mock_logger):
        """
        Tester le middleware de journalisation des requêtes.
        """
        # Créer une requête
        request = self.factory.get('/')
        request.user = self.user
        
        # Instancier le middleware
        middleware = RequestLogMiddleware(lambda r: HttpResponse())  # Retourne une réponse HTTP valide
        
        # Appliquer le middleware
        middleware.process_request(request)
        self.assertTrue(hasattr(request, 'start_time'))
        
        # Simuler une réponse
        response = middleware(request)
        
        # Vérifier que le logger a été appelé
        self.assertTrue(mock_logger.called)
    
    def test_maintenance_mode_middleware(self):
        """
        Tester le middleware de mode maintenance.
        """
        # Créer une requête
        request = self.factory.get('/')
        
        # Instancier le middleware
        middleware = MaintenanceModeMiddleware(lambda r: r)
        
        # Mode maintenance désactivé (comportement normal)
        settings.MAINTENANCE_MODE = False
        response = middleware.process_request(request)
        self.assertIsNone(response)
        
        # Activer le mode maintenance
        settings.MAINTENANCE_MODE = True
        response = middleware.process_request(request)
        self.assertEqual(response.status_code, 503)
        
        # Le middleware ne devrait pas affecter les requêtes vers l'admin
        request = self.factory.get('/admin/')
        response = middleware.process_request(request)
        self.assertIsNone(response)
        
        # Restaurer le paramètre
        settings.MAINTENANCE_MODE = False


class UtilsTest(TestCase):
    """
    Tests pour les fonctions utilitaires.
    """
    
    def test_get_unique_slug(self):
        """
        Tester la fonction get_unique_slug.
        """
        # Créer un statut
        statut1 = Statut.objects.create(nom="Test Slug")
        
        # Générer un slug pour un autre statut avec le même nom
        statut2 = Statut(nom="Test Slug")
        slug = get_unique_slug(statut2, 'nom', max_length=50)
        
        # Avec notre implémentation actuelle, sans champ slug dans le modèle,
        # la fonction retourne simplement le slug sans suffixe
        self.assertEqual(slug, 'test-slug')
    
    def test_get_file_path(self):
        """
        Tester la fonction get_file_path.
        """
        # Créer un statut
        statut = Statut.objects.create(nom="Test")
        
        # Générer un chemin de fichier
        filename = "test.jpg"
        path = get_file_path(statut, filename)
        
        # Obtenir le nom réel du modèle en minuscules
        model_name = statut.__class__.__name__.lower()
        expected_path_part = f'uploads/{model_name}/'
        
        # Vérifier le format du chemin
        self.assertTrue(expected_path_part in path, f"Attendu: {expected_path_part}, Obtenu: {path}")
        self.assertTrue(path.endswith('.jpg'))
        self.assertIn(timezone.now().strftime('%Y/%m/%d'), path)